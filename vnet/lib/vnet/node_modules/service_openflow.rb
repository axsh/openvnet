# -*- coding: utf-8 -*-

require 'celluloid'
require 'nio'
require 'trema'
#require "trema/dsl/context"
#require "trema/util"

module Vnet
  module NodeModules

    class ServiceOpenflow
      include Celluloid
      include Celluloid::Notifications
      include Celluloid::Logger
      include Vnet::Event::Dispatchable

      def initialize
        @command = Vnet::Openflow::Command.new

        start
      end

      def start
        conf = Vnet::Configurations::Vna.conf

        command_args = {}
        command_options = {}

        Phut.pid_dir = conf.trema_tmp + '/pid'
        Phut.log_dir = conf.trema_tmp + '/log'
        Phut.socket_dir = conf.trema_tmp + '/sock'

        Pio::OpenFlow.version = :OpenFlow13

        %w(log pid sock).each do |name|
          FileUtils.mkdir_p(File.join(conf.trema_tmp, name))
        end

        @command.run(command_args, command_options)
      end

      def handle_exit
        info "service_openflow: terminating"

        @command.killall
      end

    end

  end
end
