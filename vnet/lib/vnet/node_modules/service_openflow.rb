# -*- coding: utf-8 -*-

require 'celluloid'
require 'nio'
require 'trema'
require "trema/dsl/context"
require "trema/util"

module Vnet
  module NodeModules

    class SwitchManagerWrapper
      include Trema::Util

      def do_cleanup
        cleanup_current_session
      end

      def self.list_bridge_sockets
        # Dcmgr.conf.dc_networks.values.keep_if { |dcn|
        #   dcn.bridge_type == 'ovs' and !dcn.name.empty?
        # }.map { |dcn|
        #   dcn.bridge
        # }.uniq.map { |bridge|
        #   "#{Dcmgr.conf.ovs_run_dir}/#{bridge}.controller"
        # }
        ['/var/run/openvswitch/br0.controller']
      end
    end

    class ServiceOpenflow

      include Celluloid
      include Celluloid::Logger

      def start
        # Trema hack...
        $verbose = true

        conf = Vnet::Configurations::Vna.conf
        ENV['TREMA_HOME'] ||= conf.trema_home
        ENV['TREMA_TMP'] ||= conf.trema_tmp

        info "trema: pid_directory:'#{Trema.pid}'."

        SwitchManagerWrapper.new.cleanup_current_session

        Dir.glob(File.join(Trema.pid, "*.pid")).each do | each |
          # logger.info "trema kill: pid_file:'#{each}'."
          info "trema kill: pid_file:'#{each}'."
          pid = ::IO.read( each ).chomp.to_i
          system("kill #{pid}") if pid != 0
        end

        rule = {
          :port_status => "Controller",
          :packet_in => "Controller",
          :state_notify => "Controller",
          :vendor => "Controller"
        }

        bridge_sockets = SwitchManagerWrapper.list_bridge_sockets
        bridge_sockets.each { |path| FileUtils.remove_file(path, true) }

        raise "No OVS bridges defined." if bridge_sockets.empty?

        # @switch_manager = Trema::SwitchManager.new( rule, nil, bridge_sockets.last )
        @switch_manager = Trema::SwitchManager.new( rule, 6633, nil )
        # @switch_manager.command_prefix = "valgrind -q --tool=memcheck --leak-check=yes --trace-children=yes --log-socket=127.0.0.1:12345 "

        info "Calling: '#{@switch_manager.command}'."

        system(@switch_manager.command + " --no-cookie-translation")

        self.controller.init_trema
        self.controller.open_trema_tasks

        self.controller.trema_thread = Thread.new {
          begin
            self.controller.run_no_init!
          rescue Exception => e
            p e.inspect
            e.backtrace.each { |str| p str }
          end
        }
      end

      def terminate
        self.controller.pass_task {
          begin
            self.controller.shutdown!
            self.controller.close_trema_tasks
          rescue Exception => e
            p e.inspect
            e.backtrace.each { |str| p str }
          end
        }

        sleep(2)
        super
      end

      def controller
        @controller ||= Vnet::Openflow::Controller.new
      end

    end

  end
end
