# -*- coding: utf-8 -*-

require 'celluloid'
require 'pio'

module Vnet::NodeModules
  class ServiceOpenflow
    include Celluloid
    include Celluloid::Notifications
    include Celluloid::Logger
    include Vnet::Event::Dispatchable

    def initialize
      # @command = Vnet::Openflow::Command.new
    end

    def start_openflow
      info "service_openflow: starting"

      conf = Vnet::Configurations::Vna.conf

      Pio::OpenFlow.version = :OpenFlow13

      Vnet::Openflow::Controller

      @controller = Vnet::Openflow::Trema::Controller.create(6633)
      @controller.async.run []

      info "service_openflow: started"
    end

    def handle_exit
      info "service_openflow: terminating"

      @controller && @controller.alive? && @controller.stop
    end

    def dispatch_publish(event, options)
      publish(event, options)
      nil
    end

  end
end
