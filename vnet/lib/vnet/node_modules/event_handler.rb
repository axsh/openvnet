# -*- coding: utf-8 -*-
module Vnet::NodeModules
  class EventHandler
    include Celluloid
    include Celluloid::Logger

    attr_accessor :api

    def initialize
      # TODO determin which proxy should be used
      self.api = Vnet::NodeApi.get_proxy(:direct)
      @vna = []
    end

    def handle_event(event, options = {})
      debug "handle_event: #{event} options: #{options}"
      case event
      # TODO refactoring
      when "vna_initialized"
        if not @vna.include?({:node => options[:node], :actor => options[:actor]})
          @vna << {:node => options[:node], :actor => options[:actor]}
        else
          error "vna :node = #{options[:node]} actor = #{options[:actor]} is already registered."
        end
      # TODO refactoring
      # use Vnet::Event
      when "network/deleted"
        @vna.each do |v|
          DCell::Node[v[:node]][v[:actor]].async.update_topology(options[:network_id], options[:dpid])
        end
      else
        api.datapath.find_all.map(&:node_id).uniq.each do |node_id|
          actor = DCell::Node[node_id][:service_openflow]
          actor.async.handle_event(event, options) if actor
        end
      end
    end
  end
end
