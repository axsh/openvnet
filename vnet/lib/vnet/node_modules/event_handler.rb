# -*- coding: utf-8 -*-
module Vnet::NodeModules
  class EventHandler
    include Celluloid
    include Celluloid::Logger

    attr_accessor :api

    def initialize
      # TODO determin which proxy should be used
      self.api = Vnet::NodeApi.get_proxy(:direct)
    end

    def handle_event(event, options = {})
      debug "handle_event: #{event} options: #{options}"
      case event
      when "network/vif_added"
        api.datapath.find_all_by_network_id(options[:network_id]).each do |datapath|
          debug "node_id: #{datapath[:node_id]}"
          # TODO implement me
          # ex) DCell::Node[datapath.node_id][:api].vif_added(options[:network_id], options[:vif_id])
        end
      when "network/vif_removed"
        api.datapath.find_all_by_network_id(options[:network_id]).each do |datapath|
          debug "node_id: #{datapath[:node_id]}"
          # TODO implement me
          # ex) DCell::Node[datapath.node_id][:api].vif_removed(options[:network_id], options[:vif_id])
        end
      end
    end
  end
end
