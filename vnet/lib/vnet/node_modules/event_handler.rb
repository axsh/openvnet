# -*- coding: utf-8 -*-
module Vnet::NodeModules
  class EventHandler
    include Celluloid
    include Celluloid::Logger
    include Vnet::Event

    attr_accessor :api

    def initialize
      # TODO determin which proxy should be used
      self.api = Vnet::NodeApi.set_proxy(:direct)
      @vna = []
    end

    def handle_event(event, options = {})
      options = options.dup
      debug "handle_event: #{event} options: #{options}"
      case event
      when ADDED_DATAPATH_NETWORK
        datapath_network = api.datapath_network[options[:dpn_id]]
        publish_event(datapath_network.datapath.node_id, event, options)

        datapath_network.datapath_networks_in_the_same_network.each do |dpn|
          publish_event(dpn.datapath.node_id, event, options)
        end
      when REMOVED_DATAPATH_NETWORK
        datapath_network = api.datapath_network.with_deleted.first(id: options[:dpn_id])
        return unless datapath_network.deleted_at

        publish_event(datapath_network.datapath.node_id, event, options) if datapath_network.datapath

        datapath_network.datapath_networks_in_the_same_network.each do |dpn|
          publish_event(dpn.datapath.node_id, event, options)
        end
      when ADDED_DATAPATH
        datapath = api.datapath[options[:id]]
        publish_event(datapath.node_id, event, options)
      when REMOVED_DATAPATH
        datapath = api.datapath.with_deleted.first(id: options[:id])
        return unless datapath.deleted_at
        publish_event(datapath.node_id, event, options)
        datapath.peers.each do |peer|
          publish_event(peer.node_id, event, options)
        end
      else
        api.datapath.find_all.map(&:node_id).uniq.each do |node_id|
          publish_event(node_id, event, options)
        end
      end
    end

    def publish_event(node_id, event, options)
      debug "publish_event node_id: #{node_id} event: #{event} options: #{options}"
      DCell::Node[node_id].tap do |node|
        unless node && node.state == :connected
          warn "node: #{node_id} is disconnected"
          next
        end

        unless node[:service_openflow]
          warn "node: #{node_id} has no service_openflow"
          next
        end

        node[:service_openflow].publish(event, options)
      end
    end
  end
end
