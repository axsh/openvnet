# -*- coding: utf-8 -*-

require 'sequel'

module Vnet::NodeModules
  class Rpc
    include Celluloid
    include Celluloid::Logger

    task_class TaskThread

    def initialize(*args, &block)
      begin
        info log_format("initalizing on node '#{DCell.me.id}'")
      rescue Celluloid::DeadActorError => e
        warn log_format("initalizing with dead actor")
      end

      @model_classes = {}
      super
    end

    def execute(class_name, method_name, *args)
      class_name = class_name.to_sym

      begin
        unless @model_classes[class_name]
          @model_classes[class_name] = Vnet::NodeApi.const_get(class_name.to_s.camelize)
        end
        @model_classes[class_name].send(method_name, *args)
      rescue => e
        info "failed to execute: class_name: #{class_name} method_name: #{method_name} args: #{args.inspect}"
        info(e)
        abort(e.to_s) # TODO error handling
      end
    end

    #
    # Internal methods:
    #

    private

    def log_format(message, values = nil)
      "rpc: #{message}" + (values ? " (#{values})" : '')
    end

  end
end
