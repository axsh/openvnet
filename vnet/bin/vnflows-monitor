#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path('../../../vnet/lib', __FILE__)

require 'rubygems'
require 'bundler/setup'
require 'vnet/constants/openflow_flows'
require 'io/wait'
require 'optparse'
# require 'generator' #does not work in 2.0??

Signal.trap("PIPE", "EXIT")

class Flow
  include Vnet::Constants::OpenflowFlows

  attr_reader :cookie
  attr_reader :duration
  attr_reader :table
  attr_reader :priority
  attr_reader :match
  attr_reader :actions
  attr_reader :n_packets

  def initialize(flow_match, flow_actions)
    @cookie       = flow_match.delete(:cookie)
    @duration     = flow_match.delete(:duration)
    @table        = dec_to_i(flow_match.delete(:table))
    @priority     = dec_to_i(flow_match.delete(:priority))
    @n_packets    = dec_to_i(flow_match.delete(:n_packets))
    @n_bytes      = dec_to_i(flow_match.delete(:n_bytes))
    @idle_timeout = dec_to_i(flow_match.delete(:idle_timeout))
    @hard_timeout = dec_to_i(flow_match.delete(:hard_timeout))

    @match   = flow_match
    @actions = flow_actions
  end

  def match_protocol
    @match.keys.detect { |key|
      key == :arp || key == :ip || key == :udp
    }
  end

  def to_pretty0
    "%3u-%02u  %7u %7u => %-24s %s actions=%s" %
    # "%3u-%02u  %7u %7u => %s actions=%s" %
      [@table,
       @priority,
       @n_packets,
       @idle_timeout,
       cookie_to_pretty(@cookie),
       @match.inject("") { |result, value|
         if value[1].nil?
           result << "#{value[0]},"
         else
           result << "#{value[0]}=#{field_to_pretty(value)},"
         end
       }.chomp(','),
       @actions.inject("") { |result, value|
         case
         when value[1].nil?      then result << "#{value[0]},"
         when value[0] == :learn then result << "#{value[0]}(#{value[1]}),"
         else
           result << "#{value[0]}:#{field_to_pretty(value)},"
         end
       }.chomp(',')
      ]
  end

  def to_pretty99
    "%3u-%02u ,,%s,, %7u" %
    [@table, @priority, @match_protocol.to_s, @n_packets]
  end

  def to_pretty
    case Options.opts[:pretty]
    when 0 then to_pretty0
    when 1 then to_pretty0
    when 99 then to_pretty99
    else
      puts "invalid pretty type"
      to_pretty0
    end
  end

  def field_to_pretty(field)
    case field[0]
    when :goto_table
      "#{self.class.table_name(field[1].to_i)}(#{field[1]})"
    when :cookie
        "#{self.cookie_to_pretty(field[1])}"
    when :metadata, :write_metadata
      result = field[1].scan(/^0x([[:xdigit:]]*)\/0x([[:xdigit:]]*)$/)

      return field[1] if result.empty? || result[0].empty?

      value = result[0][0].to_i(16)
      mask = result[0][1] ? result[0][1].to_i(16) : ((1 << 64) - 1)
      case Options.opts[:pretty]
      when 0 then
        "#{self.metadata_to_pretty(value, mask)}(#{field[1]})"
      else
        "#{self.metadata_to_pretty(value, mask)}(#{"0x%x" % (value & 0xffffffff) })"
      end
    else
      field[1]
    end
  end

  def md_has_flag(flag, value, mask = nil)
    mask = value if mask.nil?
    (value & (mask & flag)) == flag
  end

  def md_has_not_flag(flag, value, mask)
    (~value & (mask & flag)) == flag
  end

  def cookie_to_pretty(hexstring)
    value = hexstring.to_i(16)
    id = value & COOKIE_ID_MASK
    tag = ( value & COOKIE_TAG_MASK ) >> COOKIE_TAG_SHIFT
    type = value >> COOKIE_PREFIX_SHIFT

    tname = self.class.cookie_type_name(type)

    "#{tname}(#{"0x%x" % id})%s" % (tag != 0 ? "[#{"0x%x" % tag}]" : nil)
  end

  def metadata_to_pretty(value, mask)
    result = ''

    if (value & METADATA_VALUE_PAIR_TYPE) == METADATA_VALUE_PAIR_TYPE
      result = "VALUE_PAIR(0x%x/0x%x)" % [value, mask]
      return result
    end

    if (mask & METADATA_TYPE_MASK) == METADATA_TYPE_MASK
      result << self.class.metadata_type_name(value & (mask & METADATA_TYPE_MASK)) << '|'
    end

    case value & (mask & (METADATA_FLAG_LOCAL | METADATA_FLAG_REMOTE))
    when METADATA_FLAG_LOCAL  then result << 'LOCAL|'
    when METADATA_FLAG_REMOTE then result << 'REMOTE|'
    when (METADATA_FLAG_LOCAL | METADATA_FLAG_REMOTE) then result << 'REMOTE+LOCAL|'
    end

    case value & (mask & (METADATA_FLAG_VIRTUAL | METADATA_FLAG_PHYSICAL))
    when METADATA_FLAG_VIRTUAL  then result << 'VIRTUAL|'
    when METADATA_FLAG_PHYSICAL then result << 'PHYSICAL|'
    when (METADATA_FLAG_VIRTUAL | METADATA_FLAG_PHYSICAL) then result << 'PHYSICAL+VIRTUAL|'
    end

    result << 'VIF|'        if md_has_flag(METADATA_FLAG_VIF, value, mask)
    result << 'FLOOD|'      if md_has_flag(METADATA_FLAG_FLOOD, value, mask)
    result << 'MAC2MAC|'    if md_has_flag(METADATA_FLAG_MAC2MAC, value, mask)

    result << 'IGNORE_MAC2MAC|'  if md_has_flag(METADATA_FLAG_IGNORE_MAC2MAC, value, mask)
    result << 'NO_CONTROLLER|'   if md_has_flag(METADATA_FLAG_NO_CONTROLLER, value, mask)
    result << 'REFLECTION|'      if md_has_flag(METADATA_FLAG_REFLECTION, value, mask)

    result << '!IGNORE_MAC2MAC|' if md_has_not_flag(METADATA_FLAG_IGNORE_MAC2MAC, value, mask)
    result << '!NO_CONTROLLER|'  if md_has_not_flag(METADATA_FLAG_NO_CONTROLLER, value, mask)
    result << '!REFLECTION|'     if md_has_not_flag(METADATA_FLAG_REFLECTION, value, mask)

    result.chomp('|')
  end

  def self.parse_ovs(ovs_flow)
    ovs_match, ovs_actions = ovs_flow.split('actions=')

    learn_field = nil

    action_fields = ovs_actions.split(',').map { |field|
      if field[-1] == ')'
        learn_field << field
        result = learn_field
        learn_field = nil
        next result
      end

      if learn_field
        learn_field << field << ','
        next
      end

      next field if field.scan(/^\s*learn\(([^$]*)$/).empty?

      learn_field = field << ','
      nil
    }.select { |field|
      field
    }

    parsed_match = parse_ovs_fields(ovs_match.split(','), :match)
    parsed_actions = parse_ovs_actions(action_fields, :actions)

    Flow.new(parsed_match, parsed_actions)
  end

  def self.parse_ovs_field(field, type)
    case type
    when :match
      result = field.scan(/^\s*(\w+)(=)([[:graph:]]+)\s*$/)
      key, sign, value = result.first

    when :actions
      result = field.scan(/^\s*(\w+)\(([[:graph:]]+)\)\s*$/)
      return [result.first[0], result.first[1]] if result.size == 1

      result = field.scan(/^\s*(\w+)(:)([[:graph:]]+)\s*$/)
      key, sign, value = result.first
    end

    if sign.nil?
      result = field.scan(/^\s*(\w+)\s*$/)
      key, sign = result.first
    end

    if result.size != 1 || key.nil?
      puts result.inspect
      throw "flow parse failed on field '#{field}'"
    end

    [key, value]
  end

  def self.parse_ovs_fields(fields, type)
    fields.each.inject({}) { |dst, field|
      key, value = parse_ovs_field(field, type)

      dst[key.to_sym] = value
      dst
    }
  end

  def self.parse_ovs_actions(fields, type)
    fields.each.inject([]) { |dst, field|
      key, value = parse_ovs_field(field, type)

      dst << [key.to_sym, value]
      dst
    }
  end

  def self.table_name(number)
    name = Vnet::Constants::OpenflowFlows.constants.select { |const|
      const.to_s.start_with?('TABLE_')
    }.detect { |const|
      Vnet::Constants::OpenflowFlows.const_get(const) == number
    }
    name.to_s if name
  end

  def self.metadata_type_name(number)
    name = Vnet::Constants::OpenflowFlows.constants.select { |const|
      const.to_s.start_with?('METADATA_TYPE_')
    }.detect { |const|
      Vnet::Constants::OpenflowFlows.const_get(const) == number
    }
    name ? name.to_s.sub(/^METADATA_/, '') : 'TYPE_ANY'
  end

  def self.cookie_type_name(number)
    name = Vnet::Constants::OpenflowFlows.constants.select { |const|
      const.to_s.start_with?('COOKIE_PREFIX_')
    }.detect { |const|
      Vnet::Constants::OpenflowFlows.const_get(const) == number
    }
    name ? name.to_s.sub(/^COOKIE_PREFIX_/, '') : ( "0x%x" % number )
  end

  private

  def dec_to_i(value)
    value ? value.to_i : 0
  end

end

class MyGen
  def initialize(arr)
    @thearr = arr
    @index = 0
    @len = arr.length
  end

  def current
    @thearr[@index]
  end

  def next
    @index = 1 + @index
  end

  def end?
    @index >= @len
  end
end

def do_diff(previous, current)
  pgen = MyGen.new(previous)
  cgen = MyGen.new(current)
  changed = []
  while not cgen.end?
    if pgen.end?
    then
      changed << cgen.current
      cgen.next
    else
      a = pgen.current
      b = cgen.current
      cmp = [a.table, a.priority, a.match_protocol.to_s, a.match.inspect, a.n_packets] <=> [b.table, b.priority, b.match_protocol.to_s, b.match.inspect, b.n_packets]

      if false        # debugging code

        # The current algorithm is outputing lines that are the same,
        # because the comparison criteria is the same for multiple
        # lines in the table.  Note, a.match_protocol is returning an
        # empty string for the test examples so far.
        puts "ppppppppppppppppp"
        puts a.to_pretty99
        puts "ccccccccccccccccc"
        puts b.to_pretty99
        puts ">>>>>>>>> #{cmp}#"
        puts
      end

      case cmp
      when -1 then
        pgen.next
      when 0 then
        pgen.next
        cgen.next
      when 1
        changed << cgen.current
        cgen.next
      end
    end
  end
  changed
end

module Options
  class << self
    attr_accessor :opts
    attr_accessor :count
    attr_accessor :prevflows
    attr_accessor :inputcount
    attr_accessor :nextset
    attr_accessor :run_n
  end
end

Options.opts = {}
Options.opts[:count] = 1
Options.opts[:head] = 0
Options.opts[:pretty] = 1
Options.opts[:time] = 2
Options.opts[:run] = 0
Options.opts[:iteration] = []

OptionParser.new do |op|
  op.on("-c", "--count N", Float, "Number of iterations, 0 = keep going (default 1)") do |c|
    Options.opts[:count] = c
  end
  op.on("-h", "--head N", Float, "Show top N lines") do |h|
    Options.opts[:head] = h
  end
  op.on("-d", "--diff", "Turn on diff mode") do |d|
    Options.opts[:diff] = true
  end
  op.on("-p", "--pretty N", Float,  "Switch pretty mode [0, 1, 99] (default 1)") do |p|
    Options.opts[:pretty] = p
  end
  op.on("-t", "--time N", Float, "Time in seconds to pause between iterations (default 2)") do |t|
    Options.opts[:time] = t
  end
  op.on("-r", "--run S", "Pull flows from previous run number xxx, defaults to most recent run") do |r|
    Options.opts[:run] = r
  end
  op.on("-i", "--iteration x,y", Array, "Pull flows from iteration number x. y") do |i|
    Options.opts[:iteration] = i
  end
end.parse!
Options.count = 0
Options.prevflows = nil
Options.inputcount = 0

def choose_run_number
  for i in 1..9999
    next if File.exists?("/tmp/vnflows-run-#{i}")
    Dir.mkdir("/tmp/vnflows-run-#{i}")
    break i
  end
end

def latest_run_number
  hits = Dir.glob("/tmp/vnflows-run-*")
  alln = hits.map { |d|
    digits=d.scan(/[0-9]+/)
    digits.length == 0 ? 0 : digits[0].to_i }
  alln.max
end

def read_current_table(run_n)
  Options.inputcount += 1
  $cmdline = "ovs-ofctl -O OpenFlow13 dump-flows br0"
  system("#{$cmdline} >/tmp/vnflows-run-#{run_n}/flow-#{Options.inputcount}")
end

def parse_raw_table(run,count)
  File.open("/tmp/vnflows-run-#{run}/flow-#{count}") { |p|
    info = p.readline
    $flows = p.each_line.map { |line| Flow.parse_ovs(line) }
  }

  # maybe not needed now?? Signal.trap("PIPE", "EXIT")

  $flows = $flows.sort! { |a,b|
    [a.table, a.priority, a.match_protocol.to_s, a.match.inspect] <=> [b.table, b.priority, b.match_protocol.to_s, b.match.inspect]
  }
end

def choose_flows
  if !Options.opts[:diff]
  then
    outputflows = $flows
  else
    if nil == Options.prevflows
    then
      Options.prevflows = $flows
      outputflows = []
    else
      outputflows = do_diff(Options.prevflows, $flows)
    end
  end
  Options.prevflows = $flows
  outputflows
end

def output_flows(outputflows)
  current_table = nil
  linecount = 0
  outputflows.each { |flow|
    if current_table != flow.table
      current_table = flow.table
      puts "(#{flow.table}): #{Flow.table_name(flow.table)}"
      linecount = 1 + linecount
    end

    puts flow.to_pretty
    linecount = 1 + linecount
    break if ( Options.opts[:head] > 0 ) && ( linecount > Options.opts[:head] )
  }
  puts "-------run:#{Options.run_n}--iteration:#{Options.inputcount}-------"
  Options.count = Options.count + 1
  exit if ( Options.opts[:count] > 0 ) && ( Options.count >= Options.opts[:count] )
end

def do_sleep
  sleep Options.opts[:time]
end

def update_options
  while $stdin.ready?
    $str = $stdin.readline
    parse_options $str
  end
end

Options.nextset = :time

def parse_options(str)
  tokens = str.scan(/[a-z]+|[0-9]+/)
  tokens.each { |t|
    if /[0-9]+/.match(t)
      case Options.nextset
      when :iteration
        Options.opts[:iteration] << t.to_i

      else
        Options.opts[Options.nextset] = t.to_i
      end
    else
      case t
      when /^c.*/ then
        Options.nextset = :count
        Options.count = 0
      when /^d.*/ then Options.nextset = :diff
      when /^h.*/ then Options.nextset = :head
      when /^q.*/ then exit
      when /^t.*/ then Options.nextset = :time
      when /^r.*/ then Options.nextset = :run
      when /^i.*/ then Options.nextset = :iteration
      when /^p.*/ then Options.nextset = :pretty
      else
        puts "unknown token #{t}"
      end
    end
  }
end

if Options.opts[:iteration] && Options.opts[:iteration].length != 0
  iters = Options.opts[:iteration]
  if Options.opts[:run] == 0
    latest = latest_run_number
  else
    latest = Options.opts[:run]
  end
  if latest == 0
    puts "Run archive not found"
    exit
  end

  if iters.length > 1
    parse_raw_table(latest, iters[-2])
  else
    parse_raw_table(latest, iters[-1] - 1)
  end
  choose_flows
  parse_raw_table(latest, iters[-1])
  flows = choose_flows # uses globals

  Options.run_n = latest
  Options.inputcount = iters[-1]
  output_flows(flows)
  exit
end

Options.run_n = choose_run_number
while true  # note the "exit"s elsewhere
  read_current_table(Options.run_n)
  parse_raw_table(Options.run_n, Options.inputcount)  # sets globals
  flows = choose_flows # uses globals
  output_flows(flows)
  do_sleep
  update_options
end
