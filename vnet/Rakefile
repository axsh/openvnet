# -*- coding: utf-8 -*-

$LOAD_PATH.unshift 'lib'

require 'rubygems'
require 'bundler/setup'
require 'sequel'
require 'vnet'

begin
  require 'rspec/core/rake_task'
  RSpec::Core::RakeTask.new(:spec)
  task :default => :spec
rescue LoadError => e
  # do nothing
end

def connect(config)
  Sequel.connect(config.db_uri)
end

def load_config(config_dir)
  Dir.exists?(config_dir) ? Vnet::Configurations::Vnmgr.load(File.join(config_dir, "common.conf"), File.join(config_dir, "vnmgr.conf")) : nil
end

def migrate(config, to = nil)
  Sequel.extension :migration
  connect(config)
  Sequel::Migrator.apply(Sequel::DATABASES.first, File.expand_path('../db/migrations', __FILE__), to)
end

def create_db(config)
  system("mysqladmin create #{mysql_opts(config)}")
end

def drop_db(config)
  system("mysqladmin drop -f #{mysql_opts(config)}")
end

def mysql_opts(config)
  [].tap do |opts|
    opts << "-h #{config.db.host}"
    opts << "-P #{config.db.port}"
    opts << "-u #{config.db.user}"
    opts << "--password=#{config.db.password}" if config.db.password && config.db.password.size > 0
    opts << "#{config.db.database}"
  end.join(" ")
end

namespace :db do
  config = Vnet::Configurations::Vnmgr.load rescue nil
  # deprecated
  task :init => [] do
    migrate(config)
  end
  task :migrate => [] do
    migrate(config)
  end

  task :rollback => [] do
    migrate(config, 0)
  end

  task :create do
    create_db(config)
  end

  task :drop do
    drop_db(config)
  end

  task :reset do
    drop_db(config)
    create_db(config)
    migrate(config)
  end

  task :dump => [] do
    db = connect(config)
    db.extension :schema_dumper
    puts db.dump_schema_migration
  end
end

namespace :test do
  config_dir = "spec/config/"
  config = Vnet::Configurations::Vnmgr.load(File.join(config_dir, "common.conf"), File.join(config_dir, "vnmgr.conf")) rescue nil
  namespace :db do
    # deprecated
    task :init => [] do
      migrate(config)
    end

    task :migrate => [] do
      migrate(config)
    end

    task :rollback => [] do
      migrate(config, 0)
    end

    task :create do
      create_db(config)
    end

    task :drop do
      drop_db(config)
    end

    task :reset do
      drop_db(config)
      create_db(config)
      migrate(config)
    end
  end
end
