# -*- coding: utf-8 -*-

require 'json'

module Vnmgr::NodeModules
  class DbAgent

    include Celluloid
    include Celluloid::Logger

    task_class TaskThread

    M = Vnmgr::Models

    def initialize
      info 'DbAgent initialized...'
    end

    private
    def taggable_find uuid
      begin
        model = M::Taggable.find(uuid)
      rescue
        error "[taggable_find][Error]: uuid = #{uuid}"
        raise "UnknownUUID"
      end
      model
    end

    def model_find label
      begin
        M.const_get(label)
      rescue NameError => e
        error e
        raise "NameError: #{label}"
      end
    end

    public
    def create label, params
      params = JSON.parse(params)
      model = model_find(label)
      info "[create]: model = #{model}, params = #{params}"
      begin
        record = model.new(params)
        record.save
      rescue
        error "[create][Error]: params = #{params}"
        raise "UnknownParametes"
      end
      record.to_hash.to_json
    end

    def get_all label
      model = model_find(label)
      info "[get_all]: model = #{model}"
      records = model.all
      debug "[get_all]: #{records}"
      records.map { |record|
        record.to_hash
      }.to_json
    end

    def get uuid
      info '[get]'
      record = taggable_find(uuid)
      record.to_hash.to_json
    end

    def update uuid, params
      info "[update]: uuid = #{uuid}, params = #{params}"
      record = taggable_find(uuid)

      begin
        record.update(params)
      rescue
        error "[update][Error] params = #{params}"
        raise "Error"
      end

      info "[update] updated (uuid:#{record[:uuid]})"
      record.to_hash.to_json
    end

    def delete uuid
      info "[delete]: uuid = #{uuid}"
      record = taggable_find(uuid)

      begin
        record.delete
      rescue
        error "[delete][Error]"
        raise "Error"
      end

      info "[delete]: record deleted (uuid:#{uuid})"
      nil
    end

    def attach_vif network_uuid, vif_uuid
      info "[attach_vif]: network_uuid = #{network_uuid} vif_uuid = #{vif_uuid}"
      network = taggable_find(network_uuid)
      vif = taggable_find(vif_uuid)
      vif.network_id = network.id
      vif.save
      vif.to_hash.to_json
    end

    def detach_vif vif_uuid
      info "[detach_vif]: vif_uuid = #{vif_uuid}"
      vif = taggable_find(vif_uuid)
      vif.network_id = nil
      vif.save
      vif.to_hash.to_json
    end

  end
end
