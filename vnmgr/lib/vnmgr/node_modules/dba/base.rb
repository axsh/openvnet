# -*- coding: utf-8 -*-

require 'sequel'

module Vnmgr::NodeModules::DBA
  class Base

    include Celluloid
    include Celluloid::Logger

    task_class TaskThread

    def initialize
      info "initialize"
      @@db ||= Sequel.connect('mysql://localhost/vnmgr?user=root')
      @@models ||= Module.const_get('Vnmgr').const_get('Models')
    end

    private
    def taggable_find uuid
      begin
        model = @@models::Taggable.find(uuid)
      rescue
        error "[taggable_find][Error]: uuid = #{uuid}"
        raise "UnknownUUID"
      end
      model
    end

    #TODO
    # cleanup model search
    #
    def model_find
      begin
        @@models.const_get(self.name.capitalize)
      rescue NameError => e
        error e
        raise "NameError"
      end
    end

    public
    def entry(method_name, args)
      if args.nil?
        self.method(method_name).call
      else
        self.method(method_name).call(args)
      end
    end

    def create(params)
      model = model_find
      info "[create]: model = #{model}, params = #{params}"
      begin
        record = model.new(params)
        record.save
      rescue
        error "[create][Error]: params = #{params}"
        raise "UnknownParametes"
      end
      record.to_hash
    end

    def get_all
      debug "get_all invoked"
      model = model_find
      info "[get_all]: model = #{model}"
      records = model.all
      records.map { |record|
        record.to_hash
      }
    end

    def get(uuid)
      info "[get]: uuid = #{uuid}"
      record = taggable_find(uuid)
      record.to_hash
    end

    def update(params)
      info "[update]: params = #{params}"
      record = taggable_find(params['uuid'])
      begin
        record.update(params)
      rescue
        error "[update][Error] params = #{params}"
        raise "Error"
      end
      info "[update] updated (uuid:#{params['uuid']})"
      record.to_hash
    end

    def delete(uuid)
      info "[delete]: uuid = #{uuid}"
      record = taggable_find(uuid)
      begin
        record.delete
      rescue
        error "[delete][Error]"
        raise "Error"
      end
      info "[delete]: record deleted (uuid:#{uuid})"
      nil
    end
  end
end
